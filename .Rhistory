hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.6))
lines(density(sample1), col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample1), max(sample1), n))
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
# dev.off()
knitr::opts_chunk$set(echo = FALSE)
Sys.setlocale("LC_ALL", "English")
library(tidyverse)
library(gss)
# The implementation of the orthogonal series estimator, using Hermite series
OS_Hermite <- function(x, data){
# The Hermite polynomials
# Utilize the recurrence formula "H_n(x) = 2x*H_(n-1)(x) - 2(n-1)*H_(n-2)(x) (n>=2)"
# to calculate the Hermite polynomials
hermite <- function(x, m){
if(m == 0){
1
}
else if(m == 1){2*x}
else{
a <- 1
b <- 2*x
for(i in 2:m){
c <- 2*x*b - 2*(i - 1)*a
a <- b
b <- c
}
c
}
}
# The normalized Hermite functions
phi <- function(x, m){
(hermite(x, m)/exp((x^2)/2))/sqrt((2^m)*factorial(m)*sqrt(pi))
}
n <- length(data)
value = 0
for(m in 0:30){
c <- sum(sapply(data, phi, m = m))/n
value <- value + c*phi(x, m)
}
value
}
# Generate data for the experiment
n <- 100
set.seed(1)
# The sample one
sample1 <- rnorm(n, mean = 0, sd = 1)
#The sample two
sample2 <- rbeta(n, shape1 = 2, shape2 = 4)
set.seed(1)
# The density functions for the distributions of the simulated data
# The density function for the distribution of sample one
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
# Create the visualizations to illustrate the performances of different density estimators
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
# The visualization based on sample one
xx <- seq(min(sample1), max(sample1), len = n)
# pdf("Part1_fig1.pdf")
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.6))
lines(density(sample1), col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample1), max(sample1), n))
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
# dev.off()
set.seed(1)
# The density functions for the distributions of the simulated data
# The density function for the distribution of sample one
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
# Create the visualizations to illustrate the performances of different density estimators
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
# The visualization based on sample one
xx <- seq(min(sample1), max(sample1), len = n)
# pdf("Part1_fig1.pdf")
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.6))
lines(density(sample1), col = "green", lwd = 1.6,
from = min(sample1), to = max(sample1))
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample1), max(sample1), n))
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
# dev.off()
set.seed(1)
# The density functions for the distributions of the simulated data
# The density function for the distribution of sample one
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
# Create the visualizations to illustrate the performances of different density estimators
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
# The visualization based on sample one
xx <- seq(min(sample1), max(sample1), len = n)
# pdf("Part1_fig1.pdf")
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.6))
lines(density(sample1, from = min(sample1), to = max(sample1)),
col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample1), max(sample1), n))
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
# dev.off()
# The visualization based on sample two
# The density function for the distribution of sample two
density2 <- function(x){
alpha <- 2; beta <- 4
x^(alpha - 1)*(1 - x)^(beta - 1)/beta(alpha, beta)
}
sample2.fit <- ssden( ~ sample2, domain = data.frame(sample2))
xx <- seq(min(sample2), max(sample2), len = n)
hist(sample2, freq = FALSE, main="",
xlab = "X", ylab = "Density", xlim = c(0, 0.8), ylim = c(0, 3.8))
lines(density(sample2, from = min(sample2), to = max(sample2)),
col = "green", lwd = 1.6)
lines(xx, density2(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample2), max(sample2), n))
lines(xx, sapply(xx, OS_Hermite, data = sample2), col = "red", lwd = 1.6)
lines(xx, dssden(sample2.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
knitr::opts_chunk$set(echo = FALSE)
Sys.setlocale("LC_ALL", "English")
library(tidyverse)
library(gss)
# The implementation of the orthogonal series estimator, using Hermite series
OS_Hermite <- function(x, data){
# The Hermite polynomials
# Utilize the recurrence formula "H_n(x) = 2x*H_(n-1)(x) - 2(n-1)*H_(n-2)(x) (n>=2)"
# to calculate the Hermite polynomials
hermite <- function(x, m){
if(m == 0){
1
}
else if(m == 1){2*x}
else{
a <- 1
b <- 2*x
for(i in 2:m){
c <- 2*x*b - 2*(i - 1)*a
a <- b
b <- c
}
c
}
}
# The normalized Hermite functions
phi <- function(x, m){
(hermite(x, m)/exp((x^2)/2))/sqrt((2^m)*factorial(m)*sqrt(pi))
}
n <- length(data)
value = 0
for(m in 0:30){
c <- sum(sapply(data, phi, m = m))/n
value <- value + c*phi(x, m)
}
value
}
# Generate data for the experiment
n <- 1000
set.seed(1)
# The sample one
sample1 <- rnorm(n, mean = 0, sd = 1)
#The sample two
sample2 <- rbeta(n, shape1 = 2, shape2 = 4)
set.seed(1)
# The density functions for the distributions of the simulated data
# The density function for the distribution of sample one
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
# Create the visualizations to illustrate the performances of different density estimators
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
# The visualization based on sample one
xx <- seq(min(sample1), max(sample1), len = n)
# pdf("Part1_fig1.pdf")
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.5))
lines(density(sample1, from = min(sample1), to = max(sample1)),
col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
# axis(side = 1, at = seq(min(sample1), max(sample1), n))
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
# Calculate the mean of the ISE of all the density estimators
ise.mean <- data.frame(kernel = c(mean(ise$first$kernel),
mean(ise$second$kernel),
mean(ise$third$kernel)),
OS = c(mean(ise$first$OS),
mean(ise$second$OS),
mean(ise$third$OS)),
pkd = c(mean(ise$first$pkd),
mean(ise$second$pkd),
mean(ise$third$pkd)),
row.names = c("first", "second", "third"))
plot(ise.mean$kernel, type = "b", col = "green", ylim = c(0,0.009),
xaxt = "n", xlab = "sample size")
axis(1, at = 1:3, labels = c(250, 500, 1000))
lines(ise.mean$OS, type = "b", col = "red")
lines(ise.mean$pkd, type = "b", col = "orange")
legend(x = "topright",
legend = c("Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(1, 1, 1),
col = c("green", "red", "orange"),
lwd = 1.8, bty = "n")
#computing the MISE for each density estimator
ise.mean <- data.frame(kernel = c(mean(ise$first$kernel),
mean(ise$second$kernel),
mean(ise$third$kernel)),
OS = c(mean(ise$first$OS),
mean(ise$second$OS),
mean(ise$third$OS)),
pkd = c(mean(ise$first$pkd),
mean(ise$second$pkd),
mean(ise$third$pkd)),
row.names = c("first", "second", "third"))
plot(ise.mean$kernel, type = "b", col = "green", ylim = c(0,0.009),
xaxt = "n", xlab = "sample size")
axis(1, at = 1:3, labels = c(250, 500, 1000))
lines(ise.mean$OS, type = "b", col = "red")
lines(ise.mean$pkd, type = "b", col = "orange")
legend(x = "topright",
legend = c("Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(1, 1, 1),
col = c("green", "red", "orange"),
lwd = 1.8, bty = "n")
ise
ise.mean
knitr::opts_chunk$set(echo = FALSE)
Sys.setlocale("LC_ALL", "English")
library(tidyverse)
library(gss)
# The implementation of the orthogonal series estimator, using Hermite series
OS_Hermite <- function(x, data){
hermite <- function(x, m){
if(m == 0){
1
}
else if(m == 1){2*x}
else{
a <- 1
b <- 2*x
for(i in 2:m){
c <- 2*x*b - 2*(i - 1)*a
a <- b
b <- c
}
c
}
}
#computing normalised Hermite functions
phi <- function(x, m){
(hermite(x, m)/exp((x^2)/2))/sqrt((2^m)*factorial(m)*sqrt(pi))
}
n <- length(data)
val <- 0
for(m in 0:30){
c <- sum(sapply(data, phi, m = m))/n
val <- val + c*phi(x, m)
}
val
}
# Generate data for the experiment
n <- 1000
set.seed(1)
# The sample one
sample1 <- rnorm(n, mean = 0, sd = 1)
# #The sample two
# sample2 <- rbeta(n, shape1 = 2, shape2 = 4)
set.seed(1)
# The density functions for the distributions of the simulated data
#density function for the normal distribution
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
#computing density plot for each estimator
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
xx <- seq(min(sample1), max(sample1), len = n)
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.5))
lines(density(sample1, from = min(sample1), to = max(sample1)),
col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
lines(xx, dssden(sample1.fit, xx), type = "l", col = "orange", lwd = 1.6)
legend(x = "topright",
legend = c("True Density",
"Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(2, 1, 1, 1),
col = c("black", "green", "red", "orange"),
lwd = 1.8, bty = "n")
set.seed(1)
# Initialize some variables
mu <- 0; sigma <- 1
repeat.no <- 100
n <- c(250, 500, 1000)
df <- 5
ise <- list()
ise$second <- ise$first <- data.frame("kernel" = rep(0, repeat.no),
"OS" = rep(0, repeat.no),
"pkd" = rep(0, repeat.no))
ise$third <- ise$first
# The density function of the distribution of the sample
density_sam1 = function(x){
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
#Monte Carlo Simulation with sample size n=250
for(i in 1:repeat.no){
sample1 <- rnorm(n[1], mean = mu, sd = sigma)
sample.fit <- ssden( ~ sample1, domain = data.frame(sample1))
#computing ISE for the kernel density estimator
ker_den <- density(sample1)
interval <- ker_den$x[-1] - ker_den$x[-length(ker_den$x)]
xx <- (ker_den$x[-1] + ker_den$x[-length(ker_den$x)])/2
yy <- (ker_den$y[-1] + ker_den$y[-length(ker_den$y)])/2
ise$first$kernel[i] <- sum((yy - density_sam1(xx))^2*interval)
#computing ISE for the orthogonal series estimator
ise$first$OS[i] <- integrate(function(x){
(OS_Hermite(x, data = sample1) - density_sam1(x))^2},
lower = min(sample1), upper = max(sample1))$value
#computing ISE for the penalised kernel density estimator
ise$first$pkd[i] <- integrate(function(sample1){
(dssden(sample.fit, sample1) - dnorm(sample1, mean = 0, sd = 1))^2},
lower = min(sample1), upper = max(sample1))$value
}
# The Monte Carlo Simulation with sample size n=500
for(i in 1:repeat.no){
sample1 <- rnorm(n[2], mean = mu, sd = sigma)
sample.fit <- ssden( ~ sample1, domain = data.frame(sample1))
#computing ISE for the kernel density estimator
ker_den <- density(sample1)
interval <- ker_den$x[-1] - ker_den$x[-length(ker_den$x)]
xx <- (ker_den$x[-1] + ker_den$x[-length(ker_den$x)])/2
yy <- (ker_den$y[-1] + ker_den$y[-length(ker_den$y)])/2
ise$second$kernel[i] <- sum((yy - density_sam1(xx))^2*interval)
#computing ISE for the orthogonal series estimator
ise$second$OS[i] = integrate(function(x){
(OS_Hermite(x, data = sample1) - density_sam1(x))^2},
lower = min(sample1), upper = max(sample1))$value
#computing ISE for the penalised kernel density estimator
ise$second$pkd[i] <- integrate(function(sample1){
(dssden(sample.fit, sample1) - dnorm(sample1, mean = 0, sd = 1))^2},
lower = min(sample1), upper = max(sample1))$value
}
#Monte Carlo Simulation with sample size n=1000
for(i in 1:repeat.no){
sample1 <- rnorm(n[3], mean = mu, sd = sigma)
sample.fit <- ssden( ~ sample1, domain = data.frame(sample1))
# The calculation of the ISE for the kernel density estimator
ker_den <- density(sample1)
interval <- ker_den$x[-1] - ker_den$x[-length(ker_den$x)]
xx <- (ker_den$x[-1] + ker_den$x[-length(ker_den$x)])/2
yy <- (ker_den$y[-1] + ker_den$y[-length(ker_den$y)])/2
ise$third$kernel[i] <- sum((yy - density_sam1(xx))^2*interval)
# The calculation of the ISE for the penalised kernaldensity estimator
ise$third$OS[i] <- integrate(function(x){
(OS_Hermite(x, data = sample1) - density_sam1(x))^2},
lower = min(sample1), upper = max(sample1))$value
ise$third$pkd[i] <- integrate(function(sample1){
(dssden(sample.fit, sample1) - dnorm(sample1, mean = 0, sd = 1))^2},
lower = min(sample1), upper = max(sample1))$value
}
#computing the boxplot
par(mfrow=c(1,3))
boxplot(ise$first, main = "n = 250")
boxplot(ise$second, main = "n = 500")
boxplot(ise$third, main = "n = 1000")
#computing the MISE for each density estimator
ise.mean <- data.frame(kernel = c(mean(ise$first$kernel),
mean(ise$second$kernel),
mean(ise$third$kernel)),
OS = c(mean(ise$first$OS),
mean(ise$second$OS),
mean(ise$third$OS)),
pkd = c(mean(ise$first$pkd),
mean(ise$second$pkd),
mean(ise$third$pkd)),
row.names = c("first", "second", "third"))
plot(ise.mean$kernel, type = "b", col = "green", ylim = c(0,0.009),
xaxt = "n", xlab = "sample size")
axis(1, at = 1:3, labels = c(250, 500, 1000))
lines(ise.mean$OS, type = "b", col = "red")
lines(ise.mean$pkd, type = "b", col = "orange")
legend(x = "topright",
legend = c("Kernel Density Estimator",
"Orthogonal Series Estimator",
"Penalised Kernal Density Estimator"),
lty = c(1, 1, 1),
col = c("green", "red", "orange"),
lwd = 1.8, bty = "n")
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "English")
library(tidyverse)
library(gss)
# The implementation of the orthogonal series estimator, using Hermite series
OS_Hermite <- function(x, data){
hermite <- function(x, m){
if(m == 0){
1
}
else if(m == 1){2*x}
else{
a <- 1
b <- 2*x
for(i in 2:m){
c <- 2*x*b - 2*(i - 1)*a
a <- b
b <- c
}
c
}
}
#computing normalised Hermite functions
phi <- function(x, m){
(hermite(x, m)/exp((x^2)/2))/sqrt((2^m)*factorial(m)*sqrt(pi))
}
n <- length(data)
val <- 0
for(m in 0:30){
c <- sum(sapply(data, phi, m = m))/n
val <- val + c*phi(x, m)
}
val
}
# Generate data for the experiment
n <- 1000
set.seed(1)
# The sample one
sample1 <- rnorm(n, mean = 0, sd = 1)
# #The sample two
sample2 <- rbeta(n, shape1 = 2, shape2 = 4)
set.seed(1)
# The density functions for the distributions of the simulated data
#density function for the normal distribution
density1 <- function(x){
mu <- 0; sigma <- 1
exp(-(x - mu)^2/(2*sigma^2))/(sqrt(2*pi)*sigma)
}
#computing density plot for each estimator
sample1.fit <- ssden( ~ sample1, domain = data.frame(sample1))
xx <- seq(min(sample1), max(sample1), len = n)
hist(sample1, freq = FALSE, main = "",
xlab = "X", ylab = "Density", xlim = c(-3, 3), ylim = c(0, 0.5))
lines(density(sample1, from = min(sample1), to = max(sample1)),
col = "green", lwd = 1.6)
lines(xx, density1(xx), type = "l", col = "black", lty = 2, lwd = 1.6)
lines(xx, sapply(xx, OS_Hermite, data = sample1), col = "red", lwd = 1.6)
